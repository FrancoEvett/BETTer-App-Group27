A Student provided with an ID will access the app if he is a new user he will then be required to register (enter his ID and password twice)
if he is already a user he will then be required to login entering ID and password
If he is already a student but he forgot his Password he will then be required to enter his email which will then be used to verify that the he is
the real account holder, once successful the user will be permitted to change his password.

Once logged in the student will be able to either view his weekly or daily time table. Throughout a menu the student will be able to navigate
the system and chose to create an event, set up his labs by entering the sequence number given by Brunel University.

The User will also receive notifications everytime there is an upcoming lecture or lab scheduled for him.

The aim of the project  is to make the TimeTable easier to acces and to manage for the students, also to help them as a remainder to avoid missing lectures or labs.

MAIN
main_method()
	Account.Login()
	//This will just trigger the first method to be launched and start the app

VIEW
//This first class contains the methods for the first interfaces the user will deal with 
Class.Account
	Login()
		Edit_Text(ID)
		Edit_Text(Password-Encrypted)
		Control_Account.Login_Verification(ID,Password)
		//Both ID and Password will be sent to the controller which will then check in the DataBase held in the model if there is any matching ID and if the Password
		//That the user input is correct
	Setup_Account()
		Edit_Text(ID)
		Edit_Text(Password-Encrypted)
		Edit_Text(Repeat_Password-Encrypted)
		Control_Account.New_Account(ID,Password)
		//Both ID and Password will be sent to the controller which will then check in the DataBase held in the model if the ID is already there, if not it will store it in the 
		//Database and link it to the new Password the user setup
	Reset_Password()
		Edit_Text(ID)
		Edit_Text(e-mail)
		Control_Account.Modify_Account(ID,e-mail)
		//Both ID and email will be sent to the controller which will check the validity of the user throughout his email, if successful the password linked to the ID 
		//in the database will be replace by the new password the user will set

Class.TimeTable
	Display_Timetable(String[][] Week_TimeTable, String[][]Day_TimeTable)
	//Two matrices will be sent here to the view from the controller, the day time table will be just a sub matrix of the week time table
	Create_event()
		Control_TimeTable.Set_Event(Event)
	Setup_Labs()
		Control_TimeTable.Get_Labs(Sequence)
		//an integer formed of 4 numbers will be sent to the controller which will then check in the model and retrieve the only the lab session with these numbers
	Display_Labs(String[][] Week_Labs, String[][] Day_Labs)
		//Once the user will set up his labs they will be displayed and merged with the TimeTable
Class.Notifications
	Display_Notifications()

MODEL
Class.UserDetails
	SQL_AccountsnPasswords(String ID, String Password)
	//Online Database connected with the Android App that holds all the data related to registered users
Class.TimeTableDetails
	SQL_TimeTables()
	//online Database connected with the Android App that holds all the data related to the timetable (Lectures, Labs, Seminars)
	SQL_TimeTables(int Sequence)
	//In this case we are using the overloading method based on the parameters (if the user set up his labs entering his sequence) the labs will either be shown or not
CONTROLLER
Class.Control_Account
	Login_Verification(String ID, String Password)
		UserDetails.SQL_AccountsnPasswords(ID, Password)
	New_Account(String ID, String password)
		UserDetails.SQL_AccountsnPasswords(ID, Password)
	Modify_Account(String ID, String e-mail)
	
Class.Control_TimeTable
	Get_TimeTable()
		TimeTableDetails.SQL_TimeTables()
		//This method will fetch the TimeTable data from the SQL held in the Model
	Set_TimeTable()
		TimeTable.Display_Timetable(Week_TimeTable, Day_TimeTable)
		//This method will then be used to send the information to the view so that they can be displayed
	Set_Event(String Event)
	Set_Labs()
		TimeTable.Display_Labs(Week_Labs, Day_Labs)
		//This method will be used to send the information about the labs from the model to the controller
	Get_Labs(int Sequence)
		TimeTableDetails.SQL_TimeTables(Sequence)
		//This method will be used to fetch the data from the model about the labs using the sequence input by the user
	Set_Notifications()
		//This method will get the permission necessary to display notifications even when the app is not in use